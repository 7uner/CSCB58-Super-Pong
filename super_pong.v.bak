`timescale 1ns / 1ns

module super_pong
	(
		CLOCK_50,						//	On Board 50 MHz
		// Your inputs and outputs here
        KEY,
        SW,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);

	input			CLOCK_50;				//	50 MHz
	input   [9:0]   SW;
	input   [3:0]   KEY;

	// Declare your inputs and outputs here
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[9:0]	VGA_R;   				//	VGA Red[9:0]
	output	[9:0]	VGA_G;	 				//	VGA Green[9:0]
	output	[9:0]	VGA_B;   				//	VGA Blue[9:0]
	
	wire resetn;
	assign resetn = KEY[0];
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.
	wire [2:0] colour;
	wire [7:0] x;
	wire [6:0] y;
	wire writeEn;
	
	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			//.colour(colour),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(1'b0),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";

	// have draw_screen out put done to a wire, and let main take it in as enable

	//main game module
	main m0(

	); 
endmodule

module main(
	input clk,
	input resetn,
	input [17:0] SW;
    input [3:0]  KEY;
	
	output reg [7:0] x,
	output reg [6:0] y,
	output colour [1:0],
	output reg [1:0] done;
	
	reg [5:0] current_state, next_state;
	// declare any variable needed for gameplay logic
	reg [7:0] ball_x;
	reg [6:0] ball_y;
	integer paddle_length;
	integer paddle_left;
	integer paddle_right;

	//states
	localparam home = 5'b00000,
			   game_lv1 = 5'b00001, //basic
			   game_lv2 = 5'b00002, //2 balls, speed increse
			   game_lv3 = 5'b00003, // speed increase, obstacles appear
			   result = 5'b00004;

	assign current_state = home;

	always@(posedge clk)
	begin
	//gameplay logic here
	
	ball_movement b0(//ball movement
		.clock(clk),
		.switch(),
		.reset_game(resetn),
		.paddle_left_y(paddle_left),
		.paddle_right_y(paddle_right,)
		.paddle_length_half(),
		.x(ball_x),
		.y(ball_y),
		.colour//dont need
		.plot()
		.end_game()
	);

	paddle_movement p0(//paddle movement

	);

	integer done = 0; // use this to indicate in a entire screen is done drawing

	// determine the colour based on where the index is right now
	if (x == ball_x && y == ball_y)
		colour = 3'b111;
	else if(paddle_left < y && y < paddle_left + 15 && x <= 3)
		colour = 3'b111;
	else if(right_paddle < y && y < right_paddle+ 15 && x >= 155)
		colour = 3'b111;
	else
		colour = 3'b000; 

	//determine next pixel to draw, increment y every time
	//if y reaches the bottom, then reset y and increment x by 1
	y = y + 1;
	if (y == 120) 
		begin
			x = x + 1;
			y = 0;	 
		end	   
	if (x ==160)
		begin
			x = 0;
			done = 1; // finish drawing screen
		end
	end
	end
endmodule
